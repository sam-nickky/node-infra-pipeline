
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # module.alb.aws_lb.app_alb will be created
  + resource "aws_lb" "app_alb" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "app-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Name" = "alb"
        }
      + tags_all                                                     = {
          + "Name" = "alb"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)
    }

  # module.alb.aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.alb.aws_lb_target_group.app_tg will be created
  + resource "aws_lb_target_group" "app_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "app-tg"
      + name_prefix                        = (known after apply)
      + port                               = 3000
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = "200"
          + path                = "/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 2
        }
    }

  # module.alb.aws_security_group.alb_sg will be created
  + resource "aws_security_group" "alb_sg" {
      + arn                    = (known after apply)
      + description            = "Allow HTTP and HTTPS access"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.ec2.aws_autoscaling_group.app_asg will be created
  + resource "aws_autoscaling_group" "app_asg" {
      + arn                              = (known after apply)
      + availability_zones               = (known after apply)
      + default_cooldown                 = (known after apply)
      + desired_capacity                 = 2
      + force_delete                     = false
      + force_delete_warm_pool           = false
      + health_check_grace_period        = 300
      + health_check_type                = (known after apply)
      + id                               = (known after apply)
      + ignore_failed_scaling_activities = false
      + load_balancers                   = (known after apply)
      + max_size                         = 3
      + metrics_granularity              = "1Minute"
      + min_size                         = 1
      + name                             = (known after apply)
      + name_prefix                      = (known after apply)
      + predicted_capacity               = (known after apply)
      + protect_from_scale_in            = false
      + service_linked_role_arn          = (known after apply)
      + target_group_arns                = (known after apply)
      + vpc_zone_identifier              = (known after apply)
      + wait_for_capacity_timeout        = "10m"
      + warm_pool_size                   = (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "node-app-instance"
        }
    }

  # module.ec2.aws_launch_template.app will be created
  + resource "aws_launch_template" "app" {
      + arn             = (known after apply)
      + default_version = (known after apply)
      + id              = (known after apply)
      + image_id        = "ami-042b4708b1d05f512"
      + instance_type   = "t3.micro"
      + key_name        = "Project1"
      + latest_version  = (known after apply)
      + name            = (known after apply)
      + name_prefix     = "node-app-"
      + tags_all        = (known after apply)

      + network_interfaces {
          + associate_public_ip_address = "false"
          + security_groups             = (known after apply)
        }
    }

  # module.ec2.aws_security_group.app_sg will be created
  + resource "aws_security_group" "app_sg" {
      + arn                    = (known after apply)
      + description            = "Allow traffic from ALB"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3000
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "app-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "node-app-sg"
        }
      + tags_all               = {
          + "Name" = "node-app-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # module.ecr.aws_ecr_repository.app will be created
  + resource "aws_ecr_repository" "app" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "node-demo-app"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags                 = {
          + "Name" = "node-demo-app"
        }
      + tags_all             = {
          + "Name" = "node-demo-app"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.iam.aws_iam_instance_profile.this will be created
  + resource "aws_iam_instance_profile" "this" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "ec2-instance-profile"
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = "ec2-role-for-app"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.iam.aws_iam_role.ec2_role will be created
  + resource "aws_iam_role" "ec2_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ec2-role-for-app"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.iam.aws_iam_role_policy_attachment.ecr will be created
  + resource "aws_iam_role_policy_attachment" "ecr" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "ec2-role-for-app"
    }

  # module.iam.aws_iam_role_policy_attachment.ssm will be created
  + resource "aws_iam_role_policy_attachment" "ssm" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      + role       = "ec2-role-for-app"
    }

  # module.rds.aws_db_instance.this will be created
  + resource "aws_db_instance" "this" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = 7
      + backup_target                         = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + database_insights_mode                = (known after apply)
      + db_name                               = "nodeapp"
      + db_subnet_group_name                  = "app-db-subnet-group"
      + dedicated_log_volume                  = false
      + delete_automated_backups              = true
      + domain_fqdn                           = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "postgres"
      + engine_lifecycle_support              = (known after apply)
      + engine_version                        = (known after apply)
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "nodeapp-db"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.micro"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + listener_endpoint                     = (known after apply)
      + maintenance_window                    = (known after apply)
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = true
      + storage_throughput                    = (known after apply)
      + storage_type                          = (known after apply)
      + tags                                  = {
          + "Name" = "nodeapp-rds"
        }
      + tags_all                              = {
          + "Name" = "nodeapp-rds"
        }
      + timezone                              = (known after apply)
      + username                              = "dbadmin"
      + vpc_security_group_ids                = (known after apply)
    }

  # module.rds.aws_db_subnet_group.this will be created
  + resource "aws_db_subnet_group" "this" {
      + arn                     = (known after apply)
      + description             = "Managed by Terraform"
      + id                      = (known after apply)
      + name                    = "app-db-subnet-group"
      + name_prefix             = (known after apply)
      + subnet_ids              = (known after apply)
      + supported_network_types = (known after apply)
      + tags                    = {
          + "Name" = "App DB Subnet Group"
        }
      + tags_all                = {
          + "Name" = "App DB Subnet Group"
        }
      + vpc_id                  = (known after apply)
    }

  # module.rds.aws_security_group.db_sg will be created
  + resource "aws_security_group" "db_sg" {
      + arn                    = (known after apply)
      + description            = "Allow traffic from EC2 only"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 5432
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 5432
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "db-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "db-sg"
        }
      + tags_all               = {
          + "Name" = "db-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_eip.nat will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # module.vpc.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "igw"
        }
      + tags_all = {
          + "Name" = "igw"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.nat will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "nat"
        }
      + tags_all                           = {
          + "Name" = "nat"
        }
    }

  # module.vpc.aws_route_table.private will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "private-rt"
        }
      + tags_all         = {
          + "Name" = "private-rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "public-rt"
        }
      + tags_all         = {
          + "Name" = "public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_assoc[0] will be created
  + resource "aws_route_table_association" "private_assoc" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_assoc[1] will be created
  + resource "aws_route_table_association" "private_assoc" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_assoc[0] will be created
  + resource "aws_route_table_association" "public_assoc" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_assoc[1] will be created
  + resource "aws_route_table_association" "public_assoc" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-north-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-north-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-north-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-north-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "nodejs-vpc"
        }
      + tags_all                             = {
          + "Name" = "nodejs-vpc"
        }
    }

Plan: 29 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vpc_id = (known after apply)
╷
│ Warning: Argument is deprecated
│
│   with module.vpc.aws_eip.nat,
│   on modules/vpc/main.tf line 62, in resource "aws_eip" "nat":
│   62:   vpc = true
│
│ vpc is deprecated. Use domain instead.
│
│ (and one more similar warning elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value:
module.ecr.aws_ecr_repository.app: Creating...
module.iam.aws_iam_role.ec2_role: Creating...
module.vpc.aws_vpc.main: Creating...
module.vpc.aws_eip.nat: Creating...
module.ecr.aws_ecr_repository.app: Creation complete after 0s [id=node-demo-app]
module.vpc.aws_eip.nat: Creation complete after 1s [id=eipalloc-06d4006c4b27eed50]
module.iam.aws_iam_role.ec2_role: Creation complete after 1s [id=ec2-role-for-app]
module.iam.aws_iam_role_policy_attachment.ecr: Creating...
module.iam.aws_iam_role_policy_attachment.ssm: Creating...
module.iam.aws_iam_instance_profile.this: Creating...
module.iam.aws_iam_role_policy_attachment.ecr: Creation complete after 1s [id=ec2-role-for-app-20250619054635361400000001]
module.iam.aws_iam_role_policy_attachment.ssm: Creation complete after 1s [id=ec2-role-for-app-20250619054635573000000002]
module.iam.aws_iam_instance_profile.this: Creation complete after 7s [id=ec2-instance-profile]
module.vpc.aws_vpc.main: Still creating... [10s elapsed]
module.vpc.aws_vpc.main: Creation complete after 12s [id=vpc-0168cd65ecda6f9ea]
module.vpc.aws_subnet.public[1]: Creating...
module.alb.aws_lb_target_group.app_tg: Creating...
module.vpc.aws_subnet.private[0]: Creating...
module.vpc.aws_subnet.private[1]: Creating...
module.vpc.aws_subnet.public[0]: Creating...
module.vpc.aws_internet_gateway.igw: Creating...
module.alb.aws_security_group.alb_sg: Creating...
module.vpc.aws_internet_gateway.igw: Creation complete after 0s [id=igw-0a8c1f6541c1911c2]
module.vpc.aws_route_table.public: Creating...
module.alb.aws_lb_target_group.app_tg: Creation complete after 0s [id=arn:aws:elasticloadbalancing:eu-north-1:091110283484:targetgroup/app-tg/18d0f7c2acaa78a8]
module.vpc.aws_subnet.private[0]: Creation complete after 1s [id=subnet-0304c958e55a5760e]
module.vpc.aws_route_table.public: Creation complete after 1s [id=rtb-0b6cf3b277f028d21]
module.alb.aws_security_group.alb_sg: Creation complete after 2s [id=sg-04bc338435294d85f]
module.ec2.aws_security_group.app_sg: Creating...
module.vpc.aws_subnet.private[1]: Creation complete after 2s [id=subnet-021b468139b97c20c]
module.rds.aws_db_subnet_group.this: Creating...
module.rds.aws_db_subnet_group.this: Creation complete after 1s [id=app-db-subnet-group]
module.ec2.aws_security_group.app_sg: Creation complete after 2s [id=sg-0440f2952c590aa5d]
module.rds.aws_security_group.db_sg: Creating...
module.ec2.aws_launch_template.app: Creating...
module.rds.aws_security_group.db_sg: Creation complete after 2s [id=sg-0b1b9e3613bd82200]
module.rds.aws_db_instance.this: Creating...
module.ec2.aws_launch_template.app: Creation complete after 6s [id=lt-0efe4ff8cff8be282]
module.ec2.aws_autoscaling_group.app_asg: Creating...
module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Creation complete after 11s [id=subnet-080c1b51cac4a7b7b]
module.vpc.aws_nat_gateway.nat: Creating...
module.vpc.aws_subnet.public[1]: Creation complete after 13s [id=subnet-088fb32fd43d23bee]
module.vpc.aws_route_table_association.public_assoc[1]: Creating...
module.vpc.aws_route_table_association.public_assoc[0]: Creating...
module.alb.aws_lb.app_alb: Creating...
module.vpc.aws_route_table_association.public_assoc[0]: Creation complete after 0s [id=rtbassoc-016b6d46b06efffc8]
module.vpc.aws_route_table_association.public_assoc[1]: Creation complete after 0s [id=rtbassoc-0b81590371478e314]
module.rds.aws_db_instance.this: Still creating... [10s elapsed]
module.ec2.aws_autoscaling_group.app_asg: Still creating... [10s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [10s elapsed]
module.alb.aws_lb.app_alb: Still creating... [10s elapsed]
module.ec2.aws_autoscaling_group.app_asg: Creation complete after 15s [id=terraform-20250619054655707300000006]
module.rds.aws_db_instance.this: Still creating... [20s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [20s elapsed]
module.alb.aws_lb.app_alb: Still creating... [20s elapsed]
module.rds.aws_db_instance.this: Still creating... [30s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [30s elapsed]
module.alb.aws_lb.app_alb: Still creating... [30s elapsed]
module.rds.aws_db_instance.this: Still creating... [40s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [40s elapsed]
module.alb.aws_lb.app_alb: Still creating... [40s elapsed]
module.rds.aws_db_instance.this: Still creating... [50s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [50s elapsed]
module.alb.aws_lb.app_alb: Still creating... [50s elapsed]
module.rds.aws_db_instance.this: Still creating... [1m0s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [1m0s elapsed]
module.alb.aws_lb.app_alb: Still creating... [1m0s elapsed]
module.rds.aws_db_instance.this: Still creating... [1m10s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [1m10s elapsed]
module.alb.aws_lb.app_alb: Still creating... [1m10s elapsed]
module.rds.aws_db_instance.this: Still creating... [1m20s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [1m20s elapsed]
module.alb.aws_lb.app_alb: Still creating... [1m20s elapsed]
module.rds.aws_db_instance.this: Still creating... [1m30s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [1m30s elapsed]
module.alb.aws_lb.app_alb: Still creating... [1m30s elapsed]
module.rds.aws_db_instance.this: Still creating... [1m40s elapsed]
module.vpc.aws_nat_gateway.nat: Still creating... [1m40s elapsed]
module.alb.aws_lb.app_alb: Still creating... [1m40s elapsed]
module.vpc.aws_nat_gateway.nat: Creation complete after 1m44s [id=nat-04b9a49948b0bf101]
module.vpc.aws_route_table.private: Creating...
module.vpc.aws_route_table.private: Creation complete after 0s [id=rtb-05f52ed5da2415677]
module.vpc.aws_route_table_association.private_assoc[0]: Creating...
module.vpc.aws_route_table_association.private_assoc[1]: Creating...
module.vpc.aws_route_table_association.private_assoc[1]: Creation complete after 1s [id=rtbassoc-064965b7be68062f8]
module.rds.aws_db_instance.this: Still creating... [1m50s elapsed]
module.alb.aws_lb.app_alb: Still creating... [1m50s elapsed]
module.vpc.aws_route_table_association.private_assoc[0]: Still creating... [10s elapsed]
module.rds.aws_db_instance.this: Still creating... [2m0s elapsed]
module.vpc.aws_route_table_association.private_assoc[0]: Creation complete after 14s [id=rtbassoc-06c71c74455fc39e3]
module.alb.aws_lb.app_alb: Still creating... [2m0s elapsed]
module.rds.aws_db_instance.this: Still creating... [2m10s elapsed]
 module.alb.aws_lb.app_alb: Still creating... [2m10s elapsed]
module.rds.aws_db_instance.this: Still creating... [2m20s elapsed]
module.alb.aws_lb.app_alb: Still creating... [2m20s elapsed]
module.rds.aws_db_instance.this: Still creating... [2m30s elapsed]
module.alb.aws_lb.app_alb: Still creating... [2m30s elapsed]
module.rds.aws_db_instance.this: Still creating... [2m40s elapsed]
module.alb.aws_lb.app_alb: Still creating... [2m40s elapsed]
module.rds.aws_db_instance.this: Still creating... [2m50s elapsed]
module.alb.aws_lb.app_alb: Still creating... [2m50s elapsed]
module.rds.aws_db_instance.this: Still creating... [3m0s elapsed]
module.alb.aws_lb.app_alb: Still creating... [3m0s elapsed]
module.alb.aws_lb.app_alb: Creation complete after 3m1s [id=arn:aws:elasticloadbalancing:eu-north-1:091110283484:loadbalancer/app/app-alb/722ec9adf1cd5aa9]
module.alb.aws_lb_listener.http: Creating...
module.alb.aws_lb_listener.http: Creation complete after 1s [id=arn:aws:elasticloadbalancing:eu-north-1:091110283484:listener/app/app-alb/722ec9adf1cd5aa9/6f450b9524146db7]
module.rds.aws_db_instance.this: Still creating... [3m10s elapsed]
module.rds.aws_db_instance.this: Still creating... [3m20s elapsed]
module.rds.aws_db_instance.this: Still creating... [3m30s elapsed]
module.rds.aws_db_instance.this: Still creating... [3m40s elapsed]
module.rds.aws_db_instance.this: Still creating... [3m50s elapsed]
module.rds.aws_db_instance.this: Still creating... [4m0s elapsed]
module.rds.aws_db_instance.this: Still creating... [4m10s elapsed]
module.rds.aws_db_instance.this: Still creating... [4m20s elapsed]
module.rds.aws_db_instance.this: Still creating... [4m30s elapsed]
module.rds.aws_db_instance.this: Still creating... [4m40s elapsed]
module.rds.aws_db_instance.this: Still creating... [4m50s elapsed]
module.rds.aws_db_instance.this: Still creating... [5m0s elapsed]
module.rds.aws_db_instance.this: Still creating... [5m10s elapsed]
module.rds.aws_db_instance.this: Still creating... [5m20s elapsed]
module.rds.aws_db_instance.this: Still creating... [5m30s elapsed]
module.rds.aws_db_instance.this: Creation complete after 5m34s [id=db-R22K6X3HDDOB5XXA3PFEDPJRXU]
╷
│ Warning: Argument is deprecated
│
│   with module.vpc.aws_eip.nat,
│   on modules/vpc/main.tf line 62, in resource "aws_eip" "nat":
│   62:   vpc = true
│
│ vpc is deprecated. Use domain instead.
╵

Apply complete! Resources: 29 added, 0 changed, 0 destroyed.

Outputs:

vpc_id = "vpc-0168cd65ecda6f9ea"
